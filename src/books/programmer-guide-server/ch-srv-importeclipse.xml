<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
		"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="srv-importeclipse">
	<title>Import to Eclipse</title>
	<section>
		<title>Setup Virgo</title>
		<para>
			Please read
			<ulink
				url="http://www.eclipse.org/virgo/documentation/virgo-documentation-3.0.0.x/docs/virgo-user-guide/htmlsingle/virgo-user-guide.html">Virgo user documentation</ulink>
			to learn about Virgo how to download, install, start, stop the server
			and other concepts required to work with Virgo.
		</para>
	</section>
	<section>
		<title>Setup Eclipse</title>
		<para>DNet development is done with SpringSource Tool Suite (STS)
			which is an enhanced Eclipse with all the necessary plugins to
			develop Spring based java web application. Download and start STS.
			DNet's development is done with STS 2.3.0 but STS 2.6.x works as
			well. The project import described below was done with STS 2.6.1.
		</para>
		<para>
			Please read the
			<ulink
				url="http://www.eclipse.org/virgo/documentation/virgo-documentation-3.0.0.x/docs/virgo-programmer-guide/htmlsingle/virgo-programmer-guide.html#tooling">Tooling chapter</ulink>
			from Virgo documentation for a detailed explanation on how to setup
			Eclipse STS and Virgo.
		</para>
		<para>
			If you are new to Virgo it is recommended to read the Virgo's
			documentation on
			<ulink
				url="http://www.eclipse.org/virgo/documentation/virgo-documentation-2.1.1.RELEASE/docs/virgo-getting-started/htmlsingle/virgo-getting-started.html">how to import an application to Eclipse</ulink>
			, build it and run it. Even better you might try their "Greenpages
			sample" as well.
		</para>
	</section>
	<section>
		<title>Getting the source code</title>
		<para>There are two ways to get the source code</para>
		<itemizedlist>
			<listitem>
				Download the sources as archive from github.
				<para>Get the core: Go to https://github.com/nan21/nan21.dnet.core
					and click the "Downloads" button at the top right corner. Follow
					instructions.</para>
				<para>Get the modules: Go to
					https://github.com/nan21/nan21.dnet.modules and do the same as for
					the core.</para>
				<para>Extract the contents somewhere on your disk.</para>
			</listitem>
			<listitem>
				Checkout with git
				<para>Start the git bash and type:</para>
				<programlisting>
		cd PATH_WHERE_YOU_WANT_CHECK_OUT_THE_CORE
		git clone git://github.com/nan21/nan21.dnet.core.git
		
		cd PATH_WHERE_YOU_WANT_CHECK_OUT_THE_MODULES
		git clone git://github.com/nan21/nan21.dnet.modules.git
	</programlisting>
				<para>
					For more details about using git please check their site at
					<ulink url="http://git-scm.com/">http://git-scm.com/</ulink>
				</para>
			</listitem>
		</itemizedlist>
	</section>
	<section>
		<title>Quick start with an example module</title>
		<para>TODO...</para>
	</section>
	<section>
		<title>Import DNet-Core</title>
		<para>
			In Eclipse select from menu: File->New->Other:
			<mediaobject>
				<imageobject>
					<imagedata align="center" fileref="images/eclipse-import-window.png" />
				</imageobject>
				<caption>Import project wizzard</caption>
			</mediaobject>
			On clicking "Next" the following dialog opens, of course with no
			selection. Click browse and select the root folder which contains the
			unzipped DNet-Core source code Click OK in the file browser and you
			should have all the projects marked to be imported. Optionally group
			them into a working-set. When you are ready click "Finish".
			<mediaobject>
				<imageobject>
					<imagedata align="center" fileref="images/eclipse-import-projects.png" />
				</imageobject>
				<caption>Select Maven projects to import</caption>
			</mediaobject>
			After the import you should be able to see the following in your
			package explorer, while Eclipse starts building the projects:
			<mediaobject>
				<imageobject>
					<imagedata align="center"
						fileref="images/eclipse-import-package-explorer.png" />
				</imageobject>
				<caption>DNet-Core projects</caption>
			</mediaobject>
			For the first time the build may take a longer time as Maven
			downloads all the required dependencies. When it has finished the
			build you should set up a runtime environment for the imported
			projects. Go to menu File->New->Other which opens once again the
			New... wizard
			<mediaobject>
				<imageobject>
					<imagedata align="center" fileref="images/eclipse-new-server.png" />
				</imageobject>
				<caption>Setup a new server environment in Eclipse</caption>
			</mediaobject>
			Select the "Server" option as shon in the image and click "Next"
			which opens the "New Server" setup wizard. Go to EclipseRT->Virgo Web
			Server
			<mediaobject>
				<imageobject>
					<imagedata align="center" fileref="images/eclipse-new-server-select.png" />
				</imageobject>
				<caption>Select Virgo Web Server as server type</caption>
			</mediaobject>
			Click the "Add..." link to configure a new Server runtime
			environment. In the configuration dialog click Browse and select the
			root folder of your Virgo runtime (where you extracted the zipped
			Virgo distribution) Click "Finish" to complete the task.
			<mediaobject>
				<imageobject>
					<imagedata align="center"
						fileref="images/eclipse-new-server-configure.png" />
				</imageobject>
				<caption>Choose an existing Virgo runtime</caption>
			</mediaobject>
			Now, go to menu Window->Show View->Other and in the selection box
			choose Server->Servers
			<mediaobject>
				<imageobject>
					<imagedata align="center" fileref="images/eclipse-select-servers-view.png" />
				</imageobject>
				<caption>Select Servers view to be displayed</caption>
			</mediaobject>
			In the newly opened tab-view you should be able to see now the server
			environment configured. Right click your server and choose "Add And
			Remove". Add bundles to Virgo as shown below.
			<mediaobject>
				<imageobject>
					<imagedata align="center"
						fileref="images/eclipse-add-projects-to-virgo.png" />
				</imageobject>
				<caption>Add bundles to Virgo</caption>
			</mediaobject>
			By now you should have all the projects compiled and the single type
			of error should be:
			<literal>Target runtime virgo-tomcat-3.0.x is not defined.</literal>
			with various values for x In order to get rid of these errors
			right-click each project go to Properties->Targeted Runtimes and
			uncheck all the runtimes other then your own and click Ok.
			<mediaobject>
				<imageobject>
					<imagedata align="center" fileref="images/eclipse-project-runtime.png" />
				</imageobject>
				<caption>Remove unnecesarry runtimes</caption>
			</mediaobject>
			By now all the projects should be clean and ready to start the
			server. Before this however, you must prepare the server providing
			the dependencies required by DNet ( third party libraries and DNet
			configuration files) plus a Virgo configuration.
		</para>
	</section>
	<section>
		<title>Prepare Virgo to run DNet</title>
		<para>
			Go to your Virgo installation directory and in
			<literal>config</literal>
			folder open
			<literal>org.eclipse.virgo.kernel.userregion.properties</literal>
			in a text editor. At the bottom of the file locate the following
			line:
			<programlisting>
	initialArtifacts=repository:plan/org.eclipse.virgo.kernel.userregion.springdm, repository:plan/org.eclipse.virgo.web.tomcat
	</programlisting>
			and add to the first position a reference to
			<literal>repository:bundle/javax.persistence</literal>
			so that you'll have:
			<programlisting>
	initialArtifacts=repository:bundle/javax.persistence, repository:plan/org.eclipse.virgo.kernel.userregion.springdm, repository:plan/org.eclipse.virgo.web.tomcat
	</programlisting>
		</para>
		<para>
			In your Virgo installation directory open from the
			<literal>lib</literal>
			folder the
			<literal>java6-server.profile</literal>
			file and add to both
			<literal>org.osgi.framework.system.packages</literal>
			and
			<literal>org.osgi.framework.bootdelegation</literal>
			properties the following two:
			<literal>sun.misc</literal> and <literal>javax.script</literal>
			It is a directive which tells to Virgo to delegate the loading of the
			specified system packages to bootloader. The packages are imported by the
			<literal>mvel2</literal>
			library which is used by
			<literal>activiti</literal>
			workflow engine through its
			<literal>drools</literal>
			dependency and a scripting engine used by activiti to render forms.
		</para>
		<para>
			Next you should add the dependencies required by DNet. The easiest
			way to this is to download the DNet distribution package. Go to
			<ulink url="https://sourceforge.net/projects/dnet-ebs/files/">https://sourceforge.net/projects/dnet-ebs/files/
			</ulink>
			and download the same release distribution as the project version you
			checked out. After unzipping the archive you should find a
			<literal>build</literal>
			folder which contains the application artifacts. Copy from
			<literal>build/lib</literal>
			all the files to your Virgo
			<literal>repository/usr</literal>
			. Then from the
			<literal>build/artifacts/config</literal>
			copy the files to Virgo
			<literal>config</literal>
			folder. Change properties according to your needs.
		</para>
		<para> Now you are ready to start the server from Eclipse, start it
			and wait until it loads all bundles and is ready. Go to your browser
			and type in: http://localhost:8080/nan21.dnet.core.welcome Use the
			port number which you configured, by default 8080. You should see the
			DNet welcome page. Congratulations, you just imported the DNet Core
		</para>
	</section>
	<section>
		<title>Import DNet-Modules</title>
		<para>The steps are very much the same as before, a few notes though:
		</para>
		<para>
			Import the modules which you want. Please note that some modules
			depend on others, the only stand-alone one is the administration
			module
			<literal>nan21.dnet.module.ad</literal>
		</para>
		<para>
			If you do not import the Core to publish to it to Virgo from Eclipse,
			then you'll need to provide it as the other dependecies. From the
			Dnet distribution package copy from the
			<literal>build/artifacts/core</literal>
			folder all the bundles to your Virgo
			<literal>repository/usr</literal>
			the same as you did with the third party dendencies from the
			<literal>lib</literal>
			folder.
		</para>
		<para>
			You can choose to import any of the modules into Eclipse, but the
			dependent modules should be directly provided to Virgo. If you choose
			to import only the "Sales and Distribution" module (
			<literal>nan21.dnet.module.sd</literal>
			) then you'll need to copy the required modules bundles to Virgo
			<literal>repository/usr</literal>
			In this case you'll copy all the bundles of the following modules:
			<literal>ad,bd,bp,mm</literal>
		</para>
	</section>
</chapter>