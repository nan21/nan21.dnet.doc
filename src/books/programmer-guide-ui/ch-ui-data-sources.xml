<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
		"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="ui-data-sources">
	<title>Data sources</title>
	<para>The data-source describes the structure of data which is
		retrieved from a provider and describes how and from where should this
		data be fetched. The data-source configuration is then provided to a
		data-control which automatically creates the model objects,
		data-stores and all the other necessary objects to interact with the
		data from the remote location; retrieve serialize/un-serialize, save,
		delete, present it in the views etc. There are two types of elements
		which define a certain data-source: the data descriptor and parameters
		descriptor.</para>
	<para>Let's have a look at the model definition for the CountryDs
		data-source. The intrinsic data structure is defined as the following:
	</para>
	<programlisting>
	Ext.ns("net.nan21.dnet.module.bd.geo.ds.model");
	net.nan21.dnet.module.bd.geo.ds.model.CountryDs = [
		 {name:"name",type:"string"}
		,{name:"code",type:"string"}
		,{name:"active",type:"boolean"}
		,{name:"notes",type:"string"}
		,{name:"id",type:"int"}
		,{name:"clientId",type:"int"}
		,{name:"createdAt",type:"date"}
		,{name:"modifiedAt",type:"date"}
		,{name:"createdBy",type:"string"}
		,{name:"modifiedBy",type:"string"}
		,{name:"version",type:"int"}
		,{name:"iso2",type:"string"}
		,{name:"iso3",type:"string"}
		,{name:"hasRegions",type:"boolean"}
		,{name:"currency",type:"string"}
		,{name:"language",type:"string"}
	  ];</programlisting>
	<para>As we can see it is a simple Ext.data.Record descriptor where the
		model is described with field name and field data-type descriptors.
		This corresponds to the server-side view-object defined in the
		presenter bundle. From this definition the data-control works with a
		collection of value objects like:</para>
	<programlisting>
	{
	  name:"Romania",
	  language:null,
	  id:1,
	  version:12,
	  currency:null,
	  code:"RO",
	  clientId:1,
	  active:true,
	  notes:null,
	  createdAt:"2011-06-14T09:47:29.000+0000",
	  modifiedAt:"2011-06-19T09:39:24.000+0000",
	  createdBy:"admin",
	  modifiedBy:"admin",
	  iso2:"RO",
	  iso3:"ROU",
	  hasRegions:false
	}
	</programlisting>
	<para>Now, suppose that you would like in this data-source to be able
		to filter the data according to a flag which if is set would return
		only the records last modified by the current user. In this case you
		would define a parameter model like:</para>
	<programlisting>
	Ext.ns("net.nan21.dnet.module.bd.geo.ds.param");	
	net.nan21.dnet.module.bd.geo.ds.param.CountryDsParam = [
	   {name:"paramShowMyRecords",type:"boolean"}
	];</programlisting>
	<para>and at server-side you would append the filter criteria according
		to the value of this parameter. We'll see how to work with such
		parameters later on. And finally declare the data-source itself:
	</para>
	<programlisting>
	Ext.ns("net.nan21.dnet.module.bd.geo.ds");	
	net.nan21.dnet.module.bd.geo.ds.CountryDs  = Ext.extend(dnet.base.AbstractDs, {
		constructor: function(config) {
			config = config || {};
			Ext.apply(config, {
				 dsName:"CountryDs" 				 		
				,recordFields: net.nan21.dnet.module.bd.geo.ds.model.CountryDs
				,paramFields: net.nan21.dnet.module.bd.geo.ds.param.CountryDsParam				 
			});
		 	net.nan21.dnet.module.bd.geo.ds.CountryDs.superclass.constructor.call(this, config);
		}	 
	});  
	</programlisting>
</chapter>